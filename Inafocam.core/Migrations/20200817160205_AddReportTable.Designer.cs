// <auto-generated />
using System;
using Inafocam.core.Modelos;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Inafocam.core.Migrations
{
    [DbContext(typeof(inafocam_tracingContext))]
    [Migration("20200817160205_AddReportTable")]
    partial class AddReportTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Inafocam.core.Modelos.ActionType", b =>
                {
                    b.Property<long>("ActionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ActionTypeName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnType("datetime");

                    b.HasKey("ActionTypeId");

                    b.HasIndex("StatusId");

                    b.ToTable("ActionType");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ActivityType", b =>
                {
                    b.Property<long>("ActivityTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ActivityTypeName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnType("datetime");

                    b.HasKey("ActivityTypeId");

                    b.HasIndex("StatusId");

                    b.ToTable("ActivityType");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Address", b =>
                {
                    b.Property<long?>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("address_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Address1")
                        .HasColumnName("address1")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("Address2")
                        .HasColumnName("address2")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<long?>("AddressTypeId")
                        .HasColumnName("address_type_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("CityId")
                        .HasColumnName("city_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("CountryId")
                        .HasColumnName("country_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("CreationUserId")
                        .HasColumnName("creation_user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("HomeNumber")
                        .HasColumnName("home_number")
                        .HasColumnType("varchar(8)")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<long?>("ProvinceId")
                        .HasColumnName("province_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("UpgradeUserId")
                        .HasColumnName("upgrade_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("AddressId");

                    b.HasIndex("AddressTypeId")
                        .HasName("FK_address_address_type");

                    b.HasIndex("CityId")
                        .HasName("FK_address_city");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreationUserId")
                        .HasName("FK_address_user");

                    b.HasIndex("ProvinceId")
                        .HasName("FK_address_province");

                    b.HasIndex("StatusId")
                        .HasName("FK_address_status");

                    b.HasIndex("UpgradeUserId")
                        .HasName("FK_address_user_2");

                    b.ToTable("address");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.AddressType", b =>
                {
                    b.Property<long>("AddressTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("address_type_id")
                        .HasColumnType("bigint");

                    b.Property<string>("AddressTypeName")
                        .HasColumnName("address_type_name")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("AddressTypeId");

                    b.HasIndex("StatusId")
                        .HasName("FK_address_type_status");

                    b.ToTable("address_type");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Agent", b =>
                {
                    b.Property<long?>("AgentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("agent_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("AgentTypeId")
                        .HasColumnName("agent_type_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ContactId")
                        .HasColumnName("contact_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("CreationUserId")
                        .HasColumnName("creation_user_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("UpgradeUserId")
                        .HasColumnName("upgrade_user_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("AgentId");

                    b.HasIndex("AgentTypeId")
                        .HasName("FK_agent_agent_type");

                    b.HasIndex("ContactId");

                    b.HasIndex("CreationUserId")
                        .HasName("FK_cordinator_user");

                    b.HasIndex("StatusId")
                        .HasName("FK_cordinator_status");

                    b.HasIndex("UpgradeUserId")
                        .HasName("FK_cordinator_user_2");

                    b.HasIndex("UserId")
                        .HasName("FK_agent_user");

                    b.ToTable("agent");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.AgentType", b =>
                {
                    b.Property<long>("AgentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("agent_type_id")
                        .HasColumnType("bigint");

                    b.Property<string>("AgentTypeName")
                        .HasColumnName("agent_type_name")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("AgentTypeId");

                    b.HasIndex("StatusId")
                        .HasName("FK_agent_type_status");

                    b.ToTable("agent_type");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.AgreementType", b =>
                {
                    b.Property<long>("AgreementTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("agreement_type_id")
                        .HasColumnType("bigint");

                    b.Property<string>("AgreementPanelClass")
                        .HasColumnName("agreement_panel_class")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("AgreementTypeName")
                        .HasColumnName("agreement_type_name")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("AgreementTypeId");

                    b.ToTable("agreement_type");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.AgreementWithInstitutionsRelatedToCurricularActivities", b =>
                {
                    b.Property<int>("AgreementWithInstitutionsRelatedToCurricularActivitiesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActivityDescription")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Duration")
                        .HasColumnType("text");

                    b.Property<string>("Institution")
                        .HasColumnType("text");

                    b.Property<int?>("NumberOfParticipatingStudents")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<long?>("StatusId1")
                        .HasColumnType("bigint");

                    b.Property<int?>("TracingId")
                        .HasColumnType("int");

                    b.Property<long?>("TracingScholarshipProgramTracingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnType("datetime");

                    b.HasKey("AgreementWithInstitutionsRelatedToCurricularActivitiesId");

                    b.HasIndex("StatusId1");

                    b.HasIndex("TracingScholarshipProgramTracingId");

                    b.ToTable("AgreementWithInstitutionsRelatedToCurricularActivities");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.AgreementsInstitutionRelatedCoCurricularActivities", b =>
                {
                    b.Property<int>("AgreementsInstitutionRelatedCoCurricularActivitiesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActivityDescription")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Duration")
                        .HasColumnType("text");

                    b.Property<string>("Institution")
                        .HasColumnType("text");

                    b.Property<int?>("NumberOfParticipatingStudents")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<long?>("StatusId1")
                        .HasColumnType("bigint");

                    b.Property<int?>("TracingId")
                        .HasColumnType("int");

                    b.Property<long?>("TracingScholarshipProgramTracingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnType("datetime");

                    b.HasKey("AgreementsInstitutionRelatedCoCurricularActivitiesId");

                    b.HasIndex("StatusId1");

                    b.HasIndex("TracingScholarshipProgramTracingId");

                    b.ToTable("AgreementsInstitutionRelatedCoCurricularActivities");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.City", b =>
                {
                    b.Property<long>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("city_id")
                        .HasColumnType("bigint");

                    b.Property<string>("CityName")
                        .HasColumnName("city_name")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("CityShortName")
                        .HasColumnName("city_short_name")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long?>("CountryId")
                        .HasColumnName("country_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("ProvinceId")
                        .HasColumnName("province_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId")
                        .HasName("FK_city_country");

                    b.HasIndex("ProvinceId")
                        .HasName("FK_city_province");

                    b.HasIndex("StatusId")
                        .HasName("FK_city_status");

                    b.ToTable("city");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Comment", b =>
                {
                    b.Property<long>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CommentScreen")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<long?>("ScholarshipProgramTracingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpgradeDate")
                        .HasColumnType("datetime");

                    b.HasKey("CommentId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("ScholarshipProgramTracingId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Communication", b =>
                {
                    b.Property<long?>("CommunicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("communication_id")
                        .HasColumnType("bigint");

                    b.Property<string>("CommunicationEmail")
                        .HasColumnName("communication_email")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("CommunicationPhoneNumber1")
                        .HasColumnName("communication_phone_number1")
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<string>("CommunicationPhoneNumber2")
                        .HasColumnName("communication_phone_number2")
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<string>("CommunicationWebsite")
                        .HasColumnName("communication_website")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("CreationUserId")
                        .HasColumnName("creation_user_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("UpgradeUserId")
                        .HasColumnName("upgrade_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("CommunicationId");

                    b.HasIndex("CreationUserId")
                        .HasName("FK_communication_user");

                    b.HasIndex("StatusId")
                        .HasName("FK_communication_status");

                    b.HasIndex("UpgradeUserId")
                        .HasName("FK_communication_user_2");

                    b.ToTable("communication");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Company", b =>
                {
                    b.Property<long>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("company_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("AddressId")
                        .HasColumnName("address_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("CommunicationId")
                        .HasColumnName("communication_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("CompanyTypeId")
                        .HasColumnName("company_type_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ContactId")
                        .HasColumnName("contact_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("CreationUserId")
                        .HasColumnName("creation_user_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ManagerId")
                        .HasColumnName("manager_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("OwnerId")
                        .HasColumnName("owner_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("UpgradeUserId")
                        .HasColumnName("upgrade_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("CompanyId");

                    b.HasIndex("AddressId")
                        .HasName("FK_company_address");

                    b.HasIndex("CommunicationId")
                        .HasName("FK_company_communication");

                    b.HasIndex("CompanyTypeId")
                        .HasName("FK_company_company_type");

                    b.HasIndex("ContactId")
                        .HasName("FK_company_contact");

                    b.HasIndex("CreationUserId")
                        .HasName("FK_company_user_3");

                    b.HasIndex("ManagerId")
                        .HasName("FK_company_user");

                    b.HasIndex("OwnerId")
                        .HasName("FK_company_user_2");

                    b.HasIndex("StatusId")
                        .HasName("FK_company_status");

                    b.HasIndex("UpgradeUserId")
                        .HasName("FK_company_user_4");

                    b.ToTable("company");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.CompanyType", b =>
                {
                    b.Property<long>("CompanyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("company_type_id")
                        .HasColumnType("bigint");

                    b.Property<string>("CompanyTypeName")
                        .HasColumnName("company_type_name")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("CompanyTypeId");

                    b.HasIndex("StatusId")
                        .HasName("FK_company_type_status");

                    b.ToTable("company_type");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ComponentFileType", b =>
                {
                    b.Property<int>("ComponentFileTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ComponentFileTypeName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnType("datetime");

                    b.HasKey("ComponentFileTypeId");

                    b.HasIndex("StatusId");

                    b.ToTable("ComponentFileTypes");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Contact", b =>
                {
                    b.Property<long?>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("contact_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ContactBornDate")
                        .HasColumnName("contact_born_date")
                        .HasColumnType("date");

                    b.Property<string>("ContactBornPlace")
                        .HasColumnName("contact_born_place")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("ContactComment")
                        .HasColumnName("contact_comment")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<long?>("ContactCommunicationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ContactCommunicationId1")
                        .HasColumnType("bigint");

                    b.Property<string>("ContactDocumentNumber")
                        .HasColumnName("contact_document_number")
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<string>("ContactGender")
                        .HasColumnName("contact_gender")
                        .HasColumnType("enum('female','male','none')");

                    b.Property<long?>("ContactJobInformationId")
                        .HasColumnName("contact_job_information_id")
                        .HasColumnType("bigint");

                    b.Property<string>("ContactLastname")
                        .HasColumnName("contact_lastname")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long?>("ContactMaritalStatusId")
                        .HasColumnName("contact_marital_status_id")
                        .HasColumnType("bigint");

                    b.Property<string>("ContactName")
                        .HasColumnName("contact_name")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long?>("ContactNationalityId")
                        .HasColumnName("contact_nationality_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ContactTypeId")
                        .HasColumnName("contact_type_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("CreationUserId")
                        .HasColumnName("creation_user_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("DocumentTypeId")
                        .HasColumnName("document_type_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Nationality")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("UpgradeUserId")
                        .HasColumnName("upgrade_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("ContactId");

                    b.HasIndex("ContactCommunicationId1");

                    b.HasIndex("ContactDocumentNumber")
                        .IsUnique()
                        .HasName("contact_document_number");

                    b.HasIndex("ContactTypeId")
                        .HasName("FK_contact_contact_type");

                    b.HasIndex("CreationUserId")
                        .HasName("FK_contact_user");

                    b.HasIndex("DocumentTypeId")
                        .HasName("FK_contact_document_type");

                    b.HasIndex("StatusId")
                        .HasName("FK_contact_status");

                    b.HasIndex("UpgradeUserId")
                        .HasName("FK_contact_user_2");

                    b.ToTable("contact");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ContactAddress", b =>
                {
                    b.Property<long?>("ContactAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("contact_address_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("AddressId")
                        .HasColumnName("address_id")
                        .HasColumnType("bigint");

                    b.Property<string>("ContactAddressComment")
                        .HasColumnName("contact_address_comment")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<long?>("ContactId")
                        .HasColumnName("contact_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("ContactAddressId");

                    b.HasIndex("AddressId")
                        .HasName("FK_contact_address_address");

                    b.HasIndex("ContactId")
                        .IsUnique()
                        .HasName("FK_contact_address_contact");

                    b.HasIndex("StatusId")
                        .HasName("FK_contact_address_status");

                    b.ToTable("contact_address");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ContactCommunication", b =>
                {
                    b.Property<long?>("ContactCommunicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("contact_communication_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("CommunicationId")
                        .HasColumnName("communication_id")
                        .HasColumnType("bigint");

                    b.Property<string>("ContactCommunicationComment")
                        .HasColumnName("contact_communication_comment")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<long?>("ContactId")
                        .HasColumnName("contact_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("ContactCommunicationId");

                    b.HasIndex("CommunicationId")
                        .HasName("FK_contact_communication_communication");

                    b.HasIndex("ContactId")
                        .HasName("FK_contact_communication_contact");

                    b.HasIndex("StatusId")
                        .HasName("FK_contact_communication_status");

                    b.ToTable("contact_communication");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ContactType", b =>
                {
                    b.Property<long>("ContactTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("contact_type_id")
                        .HasColumnType("bigint");

                    b.Property<string>("ContactTypeName")
                        .HasColumnName("contact_type_name")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("DocumentTypeId")
                        .HasColumnName("document_type_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("ContactTypeId");

                    b.HasIndex("DocumentTypeId")
                        .HasName("FK_contact_type_document_type");

                    b.HasIndex("StatusId")
                        .HasName("FK_contact_type_status");

                    b.ToTable("contact_type");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Country", b =>
                {
                    b.Property<long>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("country_id")
                        .HasColumnType("bigint");

                    b.Property<string>("CountryName")
                        .HasColumnName("country_name")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("CountryShortName")
                        .HasColumnName("country_short_name")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("CountryId");

                    b.HasIndex("StatusId")
                        .HasName("FK_country_status");

                    b.ToTable("country");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.DocumentType", b =>
                {
                    b.Property<long>("DocumentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("document_type_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentTypeName")
                        .HasColumnName("document_type_name")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("DocumentTypePattern")
                        .HasColumnName("document_type_pattern")
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("DocumentTypeId");

                    b.HasIndex("StatusId")
                        .HasName("FK_document_type_status");

                    b.ToTable("document_type");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.EducationType", b =>
                {
                    b.Property<long>("EducationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("education_type_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<string>("EducationTypeName")
                        .HasColumnName("education_type_name")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("EducationTypeId");

                    b.HasIndex("StatusId")
                        .HasName("FK_education_type_status");

                    b.ToTable("education_type");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.File", b =>
                {
                    b.Property<long>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("file_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("CreationUserId")
                        .HasColumnName("creation_user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("FileApplicationType")
                        .HasColumnName("file_application_type")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("FileFullPath")
                        .HasColumnName("file_full_path")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("FileName")
                        .HasColumnName("file_name")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("FilePath")
                        .HasColumnName("file_path")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long?>("FileTypeId")
                        .HasColumnName("file_type_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("UpgradeUserId")
                        .HasColumnName("upgrade_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("FileId");

                    b.HasIndex("CreationUserId")
                        .HasName("FK_file_user");

                    b.HasIndex("FileTypeId")
                        .HasName("FK_file_file_type");

                    b.HasIndex("StatusId")
                        .HasName("FK_file_status");

                    b.HasIndex("UpgradeUserId")
                        .HasName("FK_file_user_2");

                    b.ToTable("file");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.FileType", b =>
                {
                    b.Property<long>("FileTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("file_type_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<string>("FileTypeName")
                        .HasColumnName("file_type_name")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("FileTypeId");

                    b.HasIndex("StatusId")
                        .HasName("FK_file_type_status");

                    b.ToTable("file_type");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.MaritalStatus", b =>
                {
                    b.Property<long>("MaritalStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("marital_status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<string>("MaritalStatusName")
                        .HasColumnName("marital_status_name")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("MaritalStatusId");

                    b.ToTable("marital_status");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Menu", b =>
                {
                    b.Property<long>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("menu_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<string>("MenuCaption")
                        .HasColumnName("menu_caption")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("MenuIcon")
                        .HasColumnName("menu_icon")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("MenuLink")
                        .HasColumnName("menu_link")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long?>("MenuParentId")
                        .HasColumnName("menu_parent_id")
                        .HasColumnType("bigint");

                    b.Property<int?>("MenuPosition")
                        .HasColumnName("menu_position")
                        .HasColumnType("int");

                    b.Property<long?>("MenuTypeId")
                        .HasColumnName("menu_type_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("MenuId");

                    b.HasIndex("MenuParentId")
                        .HasName("FK_menu_menu");

                    b.HasIndex("MenuTypeId")
                        .HasName("FK_menu_menu_type");

                    b.HasIndex("StatusId")
                        .HasName("FK_menu_status");

                    b.ToTable("menu");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.MenuType", b =>
                {
                    b.Property<long>("MenuTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("menu_type_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<string>("MenuTypeName")
                        .HasColumnName("menu_type_name")
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("MenuTypeId");

                    b.HasIndex("StatusId")
                        .HasName("FK_menu_type_status");

                    b.ToTable("menu_type");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Migrations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int unsigned");

                    b.Property<int>("Batch")
                        .HasColumnName("batch")
                        .HasColumnType("int");

                    b.Property<string>("Migration")
                        .IsRequired()
                        .HasColumnName("migration")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("migrations");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Nationality", b =>
                {
                    b.Property<long>("NationalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("nationality_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<string>("NationalityName")
                        .HasColumnName("nationality_name")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("NationalityId");

                    b.HasIndex("StatusId");

                    b.ToTable("nationality");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Object", b =>
                {
                    b.Property<long>("ObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("object_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<string>("ObjectName")
                        .HasColumnName("object_name")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("ObjectId");

                    b.HasIndex("StatusId")
                        .HasName("FK_object_status");

                    b.ToTable("object");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ObjectMapping", b =>
                {
                    b.Property<long>("ObjectMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("object_mapping_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("ObjectId")
                        .HasColumnName("object_id")
                        .HasColumnType("bigint");

                    b.Property<string>("ObjectMappingName")
                        .HasColumnName("object_mapping_name")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("bigint");

                    b.HasKey("ObjectMappingId");

                    b.HasIndex("ObjectId")
                        .HasName("FK_object_mapping_object");

                    b.HasIndex("StatusId")
                        .HasName("FK_object_mapping_status");

                    b.ToTable("object_mapping");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Office", b =>
                {
                    b.Property<long>("OfficeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("office_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("AddressId")
                        .HasColumnName("address_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("CommunicationId")
                        .HasColumnName("communication_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("CompanyId")
                        .HasColumnName("company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("CreationUserId")
                        .HasColumnName("creation_user_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ManagerId")
                        .HasColumnName("manager_id")
                        .HasColumnType("bigint");

                    b.Property<string>("OfficeName")
                        .HasColumnName("office_name")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("UpgradeUserId")
                        .HasColumnName("upgrade_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("OfficeId");

                    b.HasIndex("AddressId")
                        .HasName("FK_office_address");

                    b.HasIndex("CommunicationId")
                        .HasName("FK_office_communication");

                    b.HasIndex("CompanyId")
                        .HasName("FK_office_company");

                    b.HasIndex("CreationUserId")
                        .HasName("FK_office_user_2");

                    b.HasIndex("ManagerId")
                        .HasName("FK_office_user");

                    b.HasIndex("StatusId")
                        .HasName("FK_office_status");

                    b.HasIndex("UpgradeUserId")
                        .HasName("FK_office_user_3");

                    b.ToTable("office");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Province", b =>
                {
                    b.Property<long>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("province_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("CountryId")
                        .HasColumnName("country_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<string>("ProvinceName")
                        .HasColumnName("province_name")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("ProvinceId");

                    b.HasIndex("CountryId")
                        .HasName("FK_province_country");

                    b.HasIndex("StatusId")
                        .HasName("FK_province_status");

                    b.ToTable("province");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("varchar(767)");

                    b.Property<long>("FileId")
                        .HasColumnType("bigint");

                    b.Property<long>("TracingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpgradeDate")
                        .HasColumnType("datetime");

                    b.HasKey("ReportId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("FileId");

                    b.HasIndex("TracingId");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ResultsFromThePreviousPeriod", b =>
                {
                    b.Property<long>("PreviousPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int?>("ComponentFileTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FileDescription")
                        .HasColumnType("text");

                    b.Property<long?>("FileId")
                        .HasColumnType("bigint");

                    b.Property<string>("Observations")
                        .HasColumnType("text");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TracingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnType("datetime");

                    b.HasKey("PreviousPeriodId");

                    b.HasIndex("ComponentFileTypeId");

                    b.HasIndex("FileId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TracingId");

                    b.ToTable("ResultsFromThePreviousPeriod");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Schedule", b =>
                {
                    b.Property<long>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("schedule_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("CreationUserId")
                        .HasColumnName("creation_user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("ScheduleName")
                        .HasColumnName("schedule_name")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatingDate")
                        .HasColumnName("updating_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("UpdatingUserId")
                        .HasColumnName("updating_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("ScheduleId");

                    b.HasIndex("CreationUserId")
                        .HasName("FK_schedule_user");

                    b.HasIndex("StatusId")
                        .HasName("FK_schedule_status");

                    b.HasIndex("UpdatingUserId")
                        .HasName("FK_schedule_user_2");

                    b.ToTable("schedule");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScheduleDay", b =>
                {
                    b.Property<long>("ScheduleDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("schedule_day_id")
                        .HasColumnType("bigint");

                    b.Property<string>("ScheduleDay1")
                        .HasColumnName("schedule_day")
                        .HasColumnType("enum('SUNDAY','MONDAY')");

                    b.Property<TimeSpan?>("ScheduleEndTime")
                        .HasColumnName("schedule_end_time")
                        .HasColumnType("time");

                    b.Property<long?>("ScheduleId")
                        .HasColumnName("schedule_id")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan?>("ScheduleStartTime")
                        .HasColumnName("schedule_start_time")
                        .HasColumnType("time");

                    b.HasKey("ScheduleDayId");

                    b.HasIndex("ScheduleId")
                        .HasName("FK_schedule_days_schedule");

                    b.ToTable("schedule_day");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipLevel", b =>
                {
                    b.Property<long>("ScholarshipLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("scholarship_level_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<string>("ScholarshipLevelName")
                        .HasColumnName("scholarship_level_name")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("ScholarshipLevelId");

                    b.HasIndex("StatusId")
                        .HasName("FK_scholarship_level_status");

                    b.ToTable("scholarship_level");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgram", b =>
                {
                    b.Property<long>("ScholarshipProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("scholarship_program_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName(" creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("ScholarshipLevelId")
                        .HasColumnName("scholarship_level_id")
                        .HasColumnType("bigint");

                    b.Property<string>("ScholarshipProgramName")
                        .HasColumnName("scholarship_program_name")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("ScholarshipProgramId");

                    b.HasIndex("ScholarshipLevelId")
                        .HasName("FK_scholarship_program_scholarship_level");

                    b.HasIndex("StatusId")
                        .HasName("FK_scholarship_program_status");

                    b.ToTable("scholarship_program");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramTracing", b =>
                {
                    b.Property<long?>("ScholarshipProgramTracingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("scholarship_program_tracing_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("CoordinatorId")
                        .HasColumnName("coordinator_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("CreationUserId")
                        .HasColumnName("creation_user_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("ScholarshipProgramUniversityId")
                        .HasColumnName("scholarship_program_university_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("TechnicalId")
                        .HasColumnName("technical_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("UniversityId")
                        .HasColumnName("university_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("UpgradeUserId")
                        .HasColumnName("upgrade_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("ScholarshipProgramTracingId");

                    b.HasIndex("CoordinatorId")
                        .HasName("FK_scholarship_program_tracking_agent");

                    b.HasIndex("CreationUserId")
                        .HasName("FK_scholarship_program_tracking_user");

                    b.HasIndex("ScholarshipProgramUniversityId")
                        .HasName("FK_scholarship_program_tracking_scholarship_program_university");

                    b.HasIndex("StatusId")
                        .HasName("FK_scholarship_program_tracking_status");

                    b.HasIndex("TechnicalId")
                        .HasName("FK_scholarship_program_tracking_agent_2");

                    b.HasIndex("UniversityId")
                        .HasName("FK_scholarship_program_tracing_university");

                    b.HasIndex("UpgradeUserId")
                        .HasName("FK_scholarship_program_tracking_user_2");

                    b.ToTable("scholarship_program_tracing");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramTracingAgreement", b =>
                {
                    b.Property<long>("ScholarshipProgramTracingAgreementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("scholarship_program_tracing_agreement_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("CommentedUserId")
                        .HasColumnName("commented_user_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("CreationUserId")
                        .HasColumnName("creation_user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("ScholarshipProgramTracingAgreementDescription")
                        .HasColumnName("scholarship_program_tracing_agreement_description")
                        .HasColumnType("varchar(512)")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<string>("ScholarshipProgramTracingAgreementDescription2")
                        .HasColumnName("scholarship_program_tracing_agreement_description2")
                        .HasColumnType("varchar(512)")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<string>("ScholarshipProgramTracingAgreementDescription3")
                        .HasColumnName("scholarship_program_tracing_agreement_description3")
                        .HasColumnType("varchar(512)")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<long?>("ScholarshipProgramTracingId")
                        .HasColumnName("scholarship_program_tracing_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ScholarshipProgramUniversityAgreementId")
                        .HasColumnName("scholarship_program_university_agreement_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("UpgradeUserId")
                        .HasColumnName("upgrade_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("ScholarshipProgramTracingAgreementId");

                    b.HasIndex("CommentedUserId")
                        .HasName("FK_scholarship_program_tracking_agreement_user_3");

                    b.HasIndex("CreationUserId")
                        .HasName("FK_scholarship_program_tracking_agreement_user");

                    b.HasIndex("ScholarshipProgramTracingId")
                        .HasName("FK_tracking");

                    b.HasIndex("ScholarshipProgramUniversityAgreementId")
                        .HasName("FK_scholarship_program_tracing_agreement");

                    b.HasIndex("StatusId")
                        .HasName("FK_scholarship_program_tracking_agreement_status");

                    b.HasIndex("UpgradeUserId")
                        .HasName("FK_scholarship_program_tracking_agreement_user_2");

                    b.ToTable("scholarship_program_tracing_agreement");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramTracingAgreementFile", b =>
                {
                    b.Property<long>("ScholarshipProgramTracingAgreementFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("scholarship_program_tracing_agreement_file_id")
                        .HasColumnType("bigint");

                    b.Property<string>("AgreementFileDescription")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("agreement_file_description")
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("'0'")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("FileId")
                        .HasColumnName("file_id")
                        .HasColumnType("bigint");

                    b.Property<long>("ScholarshipProgramTracingAgreementId")
                        .HasColumnName("scholarship_program_tracing_agreement_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("ScholarshipProgramTracingAgreementFileId");

                    b.HasIndex("FileId")
                        .HasName("FK_scholarship_program_tracking_agreement_file_file");

                    b.HasIndex("StatusId")
                        .HasName("FK_scholarship_program_tracking_agreement_file_status");

                    b.ToTable("scholarship_program_tracing_agreement_file");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramTracingAgreementsWithPracticeCenter", b =>
                {
                    b.Property<int>("AgreementsWithPracticeCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActivityDescription")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Duration")
                        .HasColumnType("text");

                    b.Property<string>("Institution")
                        .HasColumnType("text");

                    b.Property<int?>("NumberOfParticipatingStudents")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<long?>("StatusId1")
                        .HasColumnType("bigint");

                    b.Property<int?>("TracingId")
                        .HasColumnType("int");

                    b.Property<long?>("TracingScholarshipProgramTracingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnType("datetime");

                    b.HasKey("AgreementsWithPracticeCenterId");

                    b.HasIndex("StatusId1");

                    b.HasIndex("TracingScholarshipProgramTracingId");

                    b.ToTable("ScholarshipProgramTracingAgreementsWithPracticeCenter");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramTracingCourse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CourseEndDate")
                        .HasColumnName("course_end_date")
                        .HasColumnType("date");

                    b.Property<string>("CourseName")
                        .HasColumnName("course_name")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CourseStartDate")
                        .HasColumnName("course_start_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("CreationUserId")
                        .HasColumnName("creation_user_id")
                        .HasColumnType("bigint");

                    b.Property<int?>("HoursTaken")
                        .HasColumnName("hours_taken")
                        .HasColumnType("int");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<int?>("StudentsQuantity")
                        .HasColumnName("students_quantity")
                        .HasColumnType("int");

                    b.Property<long?>("TracingId")
                        .HasColumnName("tracing_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("UpgradeUserId")
                        .HasColumnName("upgrade_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StatusId")
                        .HasName("FK_scholarship_program_tracing_plan_status");

                    b.HasIndex("TracingId")
                        .HasName("FK_scholarship_program_tracing_plan_scholarship_program_tracing");

                    b.ToTable("scholarship_program_tracing_course");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramTracingCourseFile", b =>
                {
                    b.Property<long>("CourseFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("course_file_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("FileId")
                        .HasColumnName("file_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("FileTypeId")
                        .HasColumnName("file_type_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ScholarshipProgramTracingCourseId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("TracingId")
                        .HasColumnName("tracing_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("CourseFileId")
                        .HasName("PRIMARY");

                    b.HasIndex("FileId")
                        .HasName("FK__tracing_plan_file");

                    b.HasIndex("FileTypeId")
                        .HasName("FK_file_type");

                    b.HasIndex("ScholarshipProgramTracingCourseId");

                    b.HasIndex("StatusId")
                        .HasName("FK_tracing_plan_status");

                    b.HasIndex("TracingId")
                        .HasName("FK__tracing_plan");

                    b.ToTable("scholarship_program_tracing_course_file");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramTracingCourseFileType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<string>("FileTypeName")
                        .HasColumnName("file_type_name")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("scholarship_program_tracing_course_file_type");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramTracingPractice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ActivityTypeId")
                        .HasColumnName("activity")
                        .HasColumnType("bigint")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("Coordinator")
                        .HasColumnName("coordinator")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("Periodicity")
                        .HasColumnName("periodicity")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Superviser")
                        .HasColumnName("superviser")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("Teacher")
                        .HasColumnName("teacher")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long?>("TracingId")
                        .HasColumnName("tracing_id")
                        .HasColumnType("bigint");

                    b.Property<string>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("StatusId")
                        .HasName("FK_practice_status");

                    b.HasIndex("TracingId")
                        .HasName("FK_practice_tracing");

                    b.ToTable("scholarship_program_tracing_practice");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramTracingPracticePlanning", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ActionTypeId")
                        .HasColumnName("action")
                        .HasColumnType("bigint")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("varchar(512)")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<short?>("Finished")
                        .HasColumnName("finished")
                        .HasColumnType("bit(1)");

                    b.Property<short?>("Started")
                        .HasColumnName("started")
                        .HasColumnType("bit(1)");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("TracingId")
                        .HasColumnName("tracing_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("StatusId")
                        .HasName("FK_planning_status");

                    b.HasIndex("TracingId")
                        .HasName("FK_planning_tracing");

                    b.ToTable("scholarship_program_tracing_practice_planning");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramTracingQualitySystem", b =>
                {
                    b.Property<long>("QualityFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("quality_file_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("FileId")
                        .HasColumnName("file_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("FileTypeId")
                        .HasColumnName("file_type_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("TracingId")
                        .HasColumnName("tracing_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("QualityFileId")
                        .HasName("PRIMARY");

                    b.HasIndex("FileId")
                        .HasName("FK_file_quality");

                    b.HasIndex("FileTypeId");

                    b.HasIndex("StatusId")
                        .HasName("FK_status_quality");

                    b.HasIndex("TracingId")
                        .HasName("FK_program_tracing");

                    b.ToTable("scholarship_program_tracing_quality_system");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramTracingQualitySystemFileType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<string>("FileTypeName")
                        .HasColumnName("file_type_name")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("scholarship_program_tracing_quality_system_file_type");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramTracingStudentPractice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<int?>("PracticeCenterQuantity")
                        .HasColumnName("practice_center_quantity")
                        .HasColumnType("int");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<int?>("StudentPracticeTypeId")
                        .HasColumnName("practice_type")
                        .HasColumnType("int")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<int?>("StudentsQuantity")
                        .HasColumnName("students_quantity")
                        .HasColumnType("int");

                    b.Property<int?>("SupervisorQuantity")
                        .HasColumnName("supervisor_quantity")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherQuantity")
                        .HasColumnName("teacher_quantity")
                        .HasColumnType("int");

                    b.Property<long?>("TracingId")
                        .HasColumnName("tracing_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("StatusId")
                        .HasName("FK_scholarship_program_tracing_student_practice_status");

                    b.HasIndex("StudentPracticeTypeId");

                    b.HasIndex("TracingId")
                        .HasName("FK_student_practice_tracing");

                    b.ToTable("scholarship_program_tracing_student_practice");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramTracingStudentPracticeFile", b =>
                {
                    b.Property<long>("ScholarshipProgramTracingStudentPracticeFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FileDescription")
                        .HasColumnType("text");

                    b.Property<long?>("FileId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ScholarshipProgramTracingStudentPracticeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentPracticeTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnType("datetime");

                    b.HasKey("ScholarshipProgramTracingStudentPracticeFileId");

                    b.HasIndex("FileId");

                    b.HasIndex("ScholarshipProgramTracingStudentPracticeId");

                    b.HasIndex("StatusId");

                    b.ToTable("ScholarshipProgramTracingStudentPracticeFile");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramTracingStudentSupport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("Answer")
                        .HasColumnName("answer")
                        .HasColumnType("varchar(1024)")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<string>("ComoLoHacenProcedimiento")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<string>("CuandoSeHacePeriodicidad")
                        .HasColumnType("text");

                    b.Property<string>("Cuálesutilizan")
                        .HasColumnType("text");

                    b.Property<long?>("IndicatorId")
                        .HasColumnName("indicator_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("QuestionId")
                        .HasColumnName("question_id")
                        .HasColumnType("bigint");

                    b.Property<string>("QuienEsElResponsable")
                        .HasColumnType("text");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<long>("TracingId")
                        .HasColumnName("tracing_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("StatusId")
                        .HasName("FK_scholarship_program_tracing_student_support_status");

                    b.HasIndex("TracingId")
                        .HasName("FK_student_support_tracing");

                    b.ToTable("scholarship_program_tracing_student_support");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramUniversity", b =>
                {
                    b.Property<long?>("ScholarshipProgramUniversityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("scholarship_program_university_id")
                        .HasColumnType("bigint");

                    b.Property<int?>("ActiveStudents")
                        .HasColumnName("active_students")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AnnouncementEndDate")
                        .HasColumnName("announcement_end_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("AnnouncementStartDate")
                        .HasColumnName("announcement_start_date")
                        .HasColumnType("date");

                    b.Property<string>("ContractNumber")
                        .HasColumnName("contract_number")
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<long?>("CoordinatorId")
                        .HasColumnName("coordinator_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("date");

                    b.Property<string>("ScatProgramCode")
                        .HasColumnName("scat_program_code")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<long?>("ScatProgramId")
                        .HasColumnName("scat_program_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ScholarshipLevelId")
                        .HasColumnName("scholarship_level_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ScholarshipProgramId")
                        .HasColumnName("scholarship_program_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("date");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("TechnicalId")
                        .HasColumnName("technical_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("UniversityId")
                        .HasColumnName("university_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("ScholarshipProgramUniversityId");

                    b.HasIndex("CoordinatorId")
                        .HasName("FK_scholarship_program_university_agent");

                    b.HasIndex("ScholarshipLevelId")
                        .HasName("FK_scholarship_program_university_scholarship_level");

                    b.HasIndex("ScholarshipProgramId")
                        .HasName("FK_scholarship_program_university_scholarship_program");

                    b.HasIndex("StatusId")
                        .HasName("FK_scholarship_program_university_status");

                    b.HasIndex("TechnicalId")
                        .HasName("FK_scholarship_program_university_agent_2");

                    b.HasIndex("UniversityId")
                        .HasName("FK_scholarship_program_university_university");

                    b.ToTable("scholarship_program_university");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramUniversityAgent", b =>
                {
                    b.Property<long>("ScholarshipProgramUniversityCordinatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("scholarship_program_university_cordinator_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("AgentId")
                        .HasColumnName("agent_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("ScholarshipProgramUniversityId")
                        .HasColumnName("scholarship_program_university_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("ScholarshipProgramUniversityCordinatorId")
                        .HasName("PRIMARY");

                    b.HasIndex("AgentId")
                        .HasName("FK_scholarship_contact");

                    b.HasIndex("ScholarshipProgramUniversityId")
                        .HasName("FK_program_university");

                    b.HasIndex("StatusId")
                        .HasName("FK_status");

                    b.ToTable("scholarship_program_university_agent");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramUniversityAgreement", b =>
                {
                    b.Property<long>("ScholarshipProgramUniversityAgreementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("scholarship_program_university_agreement_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("AgreementTypeId")
                        .HasColumnName("agreement_type_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("CreationUserId")
                        .HasColumnName("creation_user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("ScholarshipProgramUniversityAgreement1")
                        .HasColumnName("scholarship_program_university_agreement")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<long?>("ScholarshipProgramUniversityId")
                        .HasColumnName("scholarship_program_university_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("UpgradeUserId")
                        .HasColumnName("upgrade_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("ScholarshipProgramUniversityAgreementId");

                    b.HasIndex("AgreementTypeId")
                        .HasName("FK_scholarship_program_university_agreement_agreement_type");

                    b.HasIndex("CreationUserId")
                        .HasName("FK_scholarship_program_university_agreement_user");

                    b.HasIndex("ScholarshipProgramUniversityId")
                        .HasName("FK_scholarship_program_university");

                    b.HasIndex("StatusId")
                        .HasName("FK_scholarship_program_university_agreement_status");

                    b.HasIndex("UpgradeUserId")
                        .HasName("FK_scholarship_program_university_agreement_user_2");

                    b.ToTable("scholarship_program_university_agreement");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramUniversitySubjectMatter", b =>
                {
                    b.Property<long>("ScholarshipProgramUniversitySubjectMatterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("scholarship_program_university_subject_matter_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreationUserId")
                        .HasColumnName("creation_user_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("PredictedTeacherId")
                        .HasColumnName("predicted_teacher_id")
                        .HasColumnType("bigint");

                    b.Property<long>("ScholarshipProgramUniversityId")
                        .HasColumnName("scholarship_program_university_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<int?>("SubjectMatterCredits")
                        .HasColumnName("subject_matter_credits")
                        .HasColumnType("int");

                    b.Property<long?>("SubjectMatterId")
                        .HasColumnName("subject_matter_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("TeacherId")
                        .HasColumnName("teacher_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpgradeUserId")
                        .HasColumnName("upgrade_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("ScholarshipProgramUniversitySubjectMatterId");

                    b.HasIndex("PredictedTeacherId")
                        .HasName("FK_scholarship_program_university_subject_matter_teacher_2");

                    b.HasIndex("ScholarshipProgramUniversityId")
                        .HasName("FK_spusm_scholarship_program_university");

                    b.HasIndex("StatusId")
                        .HasName("FK_scholarship_program_university_subject_matter_status");

                    b.HasIndex("SubjectMatterId")
                        .HasName("FK_scholarship_program_university_subject_matter_subject_matter");

                    b.HasIndex("TeacherId")
                        .HasName("FK_scholarship_program_university_subject_matter_teacher");

                    b.ToTable("scholarship_program_university_subject_matter");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramUniversityTeacherHiring", b =>
                {
                    b.Property<long>("ScholarshipProgramUniversityTeacherHiringId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("scholarship_program_university_teacher_hiring_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("TeacherHiringTypeId")
                        .HasColumnName("teacher_hiring_type_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("TeacherId")
                        .HasColumnName("teacher_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("ScholarshipProgramUniversityTeacherHiringId");

                    b.ToTable("scholarship_program_university_teacher_hiring");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.SpuTaughtSubject", b =>
                {
                    b.Property<long?>("Columna3")
                        .HasColumnName("Columna 3")
                        .HasColumnType("bigint");

                    b.Property<long?>("SpuTaughtSubjectId")
                        .HasColumnName("spu_taught_subject_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("SubjectMatterId")
                        .HasColumnName("subject_matter_id")
                        .HasColumnType("bigint");

                    b.ToTable("spu_taught_subject");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Status", b =>
                {
                    b.Property<long>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<string>("StatusName")
                        .HasColumnName("status_name")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<long?>("TableId")
                        .HasColumnName("table_id")
                        .HasColumnType("bigint");

                    b.Property<string>("TableName")
                        .HasColumnName("table_name")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("StatusId");

                    b.ToTable("status");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.StudentPracticeType", b =>
                {
                    b.Property<int>("StudentPracticeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("StudentPracticeTypeTypeName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnType("datetime");

                    b.HasKey("StudentPracticeTypeId");

                    b.HasIndex("StatusId");

                    b.ToTable("StudentPracticeType");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.StudyPlanManagement", b =>
                {
                    b.Property<long>("StudyPlanManagementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("study_plan_management_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("ScholarshipProgramUniversityId")
                        .HasColumnName("scholarship_program_university_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<string>("StudyPlanManagementName")
                        .HasColumnName("study_plan_management_name")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("StudyPlanManagementId");

                    b.ToTable("study_plan_management");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.SubjectMatter", b =>
                {
                    b.Property<long>("SubjectMatterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("subject_matter_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("AssignedTeacherId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("CreationUserId")
                        .HasColumnName("creation_user_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("Creditos")
                        .HasColumnName("Creditos")
                        .HasColumnType("bigint");

                    b.Property<long?>("ScholarshipProgramUniversityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<string>("SubjectMatterCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("subject_matter_code")
                        .HasColumnType("varchar(32)")
                        .HasDefaultValueSql("'0'")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("SubjectMatterName")
                        .HasColumnName("subject_matter_name")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<long?>("TeacherId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TracingStudyPlanDevelopmentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("UpgradeUserId")
                        .HasColumnName("upgrade_user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("period")
                        .HasColumnType("text");

                    b.HasKey("SubjectMatterId");

                    b.HasIndex("AssignedTeacherId");

                    b.HasIndex("CreationUserId")
                        .HasName("FK_subject_matter_user");

                    b.HasIndex("ScholarshipProgramUniversityId");

                    b.HasIndex("StatusId")
                        .HasName("FK_subject_matter_status");

                    b.HasIndex("SubjectMatterCode")
                        .IsUnique()
                        .HasName("subject_matter_code");

                    b.HasIndex("TeacherId");

                    b.HasIndex("TracingStudyPlanDevelopmentId");

                    b.HasIndex("UpgradeUserId")
                        .HasName("FK_subject_matter_user_2");

                    b.ToTable("subject_matter");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Teacher", b =>
                {
                    b.Property<long?>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("teacher_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ContactId")
                        .HasColumnName("contact_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("HigherTeacherEducationId")
                        .HasColumnName("higher_teacher_education_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<string>("TeacherCategory")
                        .HasColumnName("teacher_category")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<short?>("TeacherHasAdminFunctions")
                        .HasColumnName("teacher_has_admin_functions")
                        .HasColumnType("bit(1)");

                    b.Property<long?>("TeacherHiringTypeId")
                        .HasColumnName("teacher_hiring_type_id")
                        .HasColumnType("bigint");

                    b.Property<short?>("TeacherIsPac")
                        .HasColumnName("teacher_is_pac")
                        .HasColumnType("bit(1)");

                    b.Property<DateTime?>("TeacherJobStartDate")
                        .HasColumnName("teacher_job_start_date")
                        .HasColumnType("date");

                    b.Property<short?>("TeacherMatchHigherTitle")
                        .HasColumnName("teacher_match_higher_title")
                        .HasColumnType("bit(1)");

                    b.Property<int?>("TeacherResearchProcess")
                        .HasColumnName("teacher_research_process")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherResearchPublished")
                        .HasColumnName("teacher_research_published")
                        .HasColumnType("int");

                    b.Property<short?>("TeacherWorkForOtherInstitutions")
                        .HasColumnName("teacher_work_for_other_institutions")
                        .HasColumnType("bit(1)");

                    b.Property<long?>("UniversityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("TeacherId");

                    b.HasIndex("ContactId")
                        .HasName("FK_teacher_contact");

                    b.HasIndex("HigherTeacherEducationId")
                        .HasName("FK_teacher_teacher_education");

                    b.HasIndex("StatusId")
                        .HasName("FK_teacher_status");

                    b.HasIndex("TeacherHiringTypeId")
                        .HasName("FK_teacher_teacher_hiring_type");

                    b.ToTable("teacher");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.TeacherEducation", b =>
                {
                    b.Property<long>("TeacherEducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("teacher_education_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("EducationTypeId")
                        .HasColumnName("education_type_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("TeacherEducationFinishDate")
                        .HasColumnName("teacher_education_finish_date")
                        .HasColumnType("date");

                    b.Property<string>("TeacherEducationInstitution")
                        .HasColumnName("teacher_education_institution")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("TeacherEducationTitle")
                        .HasColumnName("teacher_education_title")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long>("TeacherId")
                        .HasColumnName("teacher_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("TeacherEducationId");

                    b.HasIndex("EducationTypeId")
                        .HasName("FK_teacher_education_education_type");

                    b.HasIndex("StatusId")
                        .HasName("FK_teacher_education_status");

                    b.HasIndex("TeacherId")
                        .HasName("FK_teacher_education_teacher");

                    b.ToTable("teacher_education");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.TeacherFile", b =>
                {
                    b.Property<long?>("TeacherFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("teacher_file_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("FileId")
                        .HasColumnName("file_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<string>("TeacherFileComment")
                        .HasColumnName("teacher_file_comment")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long?>("TeacherFileTypeId")
                        .HasColumnName("teacher_file_type_id")
                        .HasColumnType("bigint");

                    b.Property<long>("TeacherId")
                        .HasColumnName("teacher_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("TeacherResearchId")
                        .HasColumnName("teacher_research_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("TeacherFileId");

                    b.HasIndex("FileId")
                        .HasName("FK_teacher_file_file");

                    b.HasIndex("StatusId")
                        .HasName("FK_teacher_file_status");

                    b.HasIndex("TeacherFileTypeId")
                        .HasName("FK_teacher_file_teacher_file_type");

                    b.HasIndex("TeacherId")
                        .HasName("FK_teacher_file_teacher");

                    b.HasIndex("TeacherResearchId")
                        .HasName("FK_teacher_file_teacher_research");

                    b.ToTable("teacher_file");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.TeacherFileType", b =>
                {
                    b.Property<long>("TeacherFileTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("teacher_file_type_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<string>("TeacherFileTypeName")
                        .HasColumnName("teacher_file_type_name")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("TeacherFileTypeId");

                    b.HasIndex("StatusId")
                        .HasName("FK_teacher_file_type_status");

                    b.ToTable("teacher_file_type");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.TeacherHiringType", b =>
                {
                    b.Property<long>("TeacherHiringTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("teacher_hiring_type_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<string>("TeacherHiringTypeName")
                        .HasColumnName("teacher_hiring_type_name")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("TeacherHiringTypeId");

                    b.HasIndex("StatusId")
                        .HasName("FK_teacher_hiring_type_status");

                    b.ToTable("teacher_hiring_type");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.TeacherResearch", b =>
                {
                    b.Property<long>("TeacherResearchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("teacher_research_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<long>("TeacherId")
                        .HasColumnName("teacher_id")
                        .HasColumnType("bigint");

                    b.Property<string>("TeacherResearchName")
                        .HasColumnName("teacher_research_name")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<int?>("TeacherResearchQuantity")
                        .HasColumnName("teacher_research_quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("TeacherResearchId");

                    b.HasIndex("StatusId")
                        .HasName("FK_teacher_research_status");

                    b.HasIndex("TeacherId")
                        .HasName("FK_teacher_research_teacher");

                    b.ToTable("teacher_research");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.TracingStudyPlanDevelopment", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<int?>("ApprovedStudentsQuantity")
                        .HasColumnName("approved_students_quantity")
                        .HasColumnType("int");

                    b.Property<long?>("AssignedTeacherId")
                        .HasColumnName("assigned_teacher_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("CreationUserId")
                        .HasColumnName("creation_user_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("Creditos")
                        .HasColumnType("bigint");

                    b.Property<int?>("DesertedStudentsQuantity")
                        .HasColumnName("deserted_students_quantity")
                        .HasColumnType("int");

                    b.Property<short?>("HigherTitleMatchAssignedMatter")
                        .HasColumnName("higher_title_match_assigned_matter")
                        .HasColumnType("bit(1)");

                    b.Property<long?>("HigherTitleSupportMatterId")
                        .HasColumnName("higher_title_support_matter_id")
                        .HasColumnType("bigint");

                    b.Property<int?>("MaleQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("ReprovedStudentsQuantity")
                        .HasColumnName("reproved_students_quantity")
                        .HasColumnType("int");

                    b.Property<long?>("ScholarshipProgramTracingId")
                        .HasColumnName("scholarship_program_tracing_id")
                        .HasColumnType("bigint");

                    b.Property<double?>("ScoreAverageStudents")
                        .HasColumnName("score_average_students")
                        .HasColumnType("double");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentReportFileId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SubjectMatterId")
                        .HasColumnName("subject_matter_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("SubjectMatterScoreReportFileId")
                        .HasColumnName("subject_matter_score_report_file_id")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan?>("SubjectMatterTimeEnd")
                        .HasColumnName("subject_matter_time_end")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("SubjectMatterTimeStart")
                        .HasColumnName("subject_matter_time_start")
                        .HasColumnType("time");

                    b.Property<long?>("TeacherId")
                        .HasColumnName("teacher_id")
                        .HasColumnType("bigint");

                    b.Property<string>("UniverityPeriod")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("UpgradeUserId")
                        .HasColumnName("upgrade_user_id")
                        .HasColumnType("bigint");

                    b.Property<int?>("femaleQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTeacherId")
                        .HasName("FK_teacher_teacher_2");

                    b.HasIndex("HigherTitleSupportMatterId")
                        .HasName("FK_teacher_education");

                    b.HasIndex("ScholarshipProgramTracingId")
                        .HasName("FK_tracing");

                    b.HasIndex("StatusId")
                        .HasName("FK_teacher_status_status");

                    b.HasIndex("StudentReportFileId");

                    b.HasIndex("SubjectMatterId")
                        .HasName("FK_teacher_subject_matter");

                    b.HasIndex("SubjectMatterScoreReportFileId");

                    b.HasIndex("TeacherId")
                        .HasName("FK_teacher_teacher");

                    b.ToTable("tracing_study_plan_development");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.University", b =>
                {
                    b.Property<long?>("UniversityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("university_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("AddressId")
                        .HasColumnName("address_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("CommunicationId")
                        .HasColumnName("communication_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<string>("UniversityAcronym")
                        .HasColumnName("university_acronym")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("UniversityCampus")
                        .HasColumnName("university_campus")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("UniversityName")
                        .HasColumnName("university_name")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.HasKey("UniversityId");

                    b.HasIndex("AddressId")
                        .HasName("FK_university_address");

                    b.HasIndex("CommunicationId")
                        .HasName("FK_university_communication");

                    b.HasIndex("StatusId")
                        .HasName("FK_university_status");

                    b.ToTable("university");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("CompanyId")
                        .HasColumnName("company_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ContactId")
                        .HasColumnName("contact_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("CreationUserId")
                        .HasColumnName("creation_user_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("OfficeId")
                        .HasColumnName("office_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("UpgradeUserId")
                        .HasColumnName("upgrade_user_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UserDateExpirePassword")
                        .HasColumnName("user_date_expire_password")
                        .HasColumnType("datetime");

                    b.Property<short?>("UserExpirePassword")
                        .HasColumnName("user_expire_password")
                        .HasColumnType("bit(1)");

                    b.Property<string>("UserLogin")
                        .HasColumnName("user_login")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("UserPassword")
                        .HasColumnName("user_password")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long?>("UserRoleId")
                        .HasColumnName("user_role_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserScheduleId")
                        .HasColumnName("user_schedule_id")
                        .HasColumnType("bigint");

                    b.HasKey("UserId");

                    b.HasIndex("CompanyId")
                        .HasName("FK_user_company");

                    b.HasIndex("ContactId")
                        .HasName("FK_user_contact");

                    b.HasIndex("CreationUserId")
                        .HasName("FK_user_user");

                    b.HasIndex("OfficeId")
                        .HasName("FK_user_office");

                    b.HasIndex("StatusId")
                        .HasName("FK_user_status");

                    b.HasIndex("UpgradeUserId")
                        .HasName("FK_user_user_2");

                    b.HasIndex("UserRoleId")
                        .HasName("FK_user_user_role");

                    b.HasIndex("UserScheduleId")
                        .HasName("FK_user_schedule");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.UserMapRole", b =>
                {
                    b.Property<long>("UserMapRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_map_role_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserRoleId")
                        .HasColumnName("user_role_id")
                        .HasColumnType("bigint");

                    b.HasKey("UserMapRoleId");

                    b.HasIndex("UserId")
                        .HasName("FK_user_roles_user");

                    b.HasIndex("UserRoleId")
                        .HasName("FK_user_roles_user_role");

                    b.ToTable("user_map_role");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.UserRole", b =>
                {
                    b.Property<long>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_role_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("CreationUserId")
                        .HasColumnName("creation_user_id")
                        .HasColumnType("bigint");

                    b.Property<long>("OfficeId")
                        .HasColumnName("office_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("UpgradeUserId")
                        .HasColumnName("upgrade_user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("UserRoleDescription")
                        .HasColumnName("user_role_description")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("UserRoleName")
                        .HasColumnName("user_role_name")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("UserRoleId");

                    b.HasIndex("CreationUserId")
                        .HasName("FK_user_role_user");

                    b.HasIndex("OfficeId")
                        .HasName("FK_user_role_office");

                    b.HasIndex("StatusId")
                        .HasName("FK_user_role_status");

                    b.HasIndex("UpgradeUserId")
                        .HasName("FK_user_role_user_2");

                    b.ToTable("user_role");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.UserRolePermission", b =>
                {
                    b.Property<long>("UserRolePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_role_permission_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ObjectId")
                        .HasColumnName("object_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserRoleId")
                        .HasColumnName("user_role_id")
                        .HasColumnType("bigint");

                    b.Property<string>("UserRolePermissionName")
                        .HasColumnName("user_role_permission_name")
                        .HasColumnType("enum('INSERT','UPDATE','DELETE','QUERY','ALL')");

                    b.Property<string>("UserRolePermissionValue")
                        .HasColumnName("user_role_permission_value")
                        .HasColumnType("enum('GRANTED','DENIED','GRANTED INDIRECTLY')");

                    b.HasKey("UserRolePermissionId");

                    b.HasIndex("ObjectId")
                        .HasName("FK_user_role_permission_table");

                    b.HasIndex("UserRoleId")
                        .HasName("FK_user_role_permission_user_role");

                    b.ToTable("user_role_permission");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.UserUniversity", b =>
                {
                    b.Property<long>("UserUniversityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_university_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("UniversityId")
                        .HasColumnName("university_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.Property<long?>("UserCreationId")
                        .HasColumnName("user_creation_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserUpgradeId")
                        .HasColumnName("user_upgrade_id")
                        .HasColumnType("bigint");

                    b.Property<string>("UsuarioId")
                        .HasColumnName("usuario_id")
                        .HasColumnType("text");

                    b.HasKey("UserUniversityId");

                    b.HasIndex("StatusId")
                        .HasName("FK__status");

                    b.HasIndex("UniversityId")
                        .HasName("FK__university");

                    b.ToTable("user_university");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Users", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTimeOffset?>("EmailVerifiedAt")
                        .HasColumnName("email_verified_at")
                        .HasColumnType("timestamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("RememberToken")
                        .HasColumnName("remember_token")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<string>("Imagen")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<long?>("UniversityId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("UniversityId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(767)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ActionType", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ActivityType", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Address", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.AddressType", "AddressType")
                        .WithMany("Address")
                        .HasForeignKey("AddressTypeId")
                        .HasConstraintName("FK_address_address_type");

                    b.HasOne("Inafocam.core.Modelos.City", "City")
                        .WithMany("Address")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_address_city");

                    b.HasOne("Inafocam.core.Modelos.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Inafocam.core.Modelos.User", "CreationUser")
                        .WithMany("AddressCreationUser")
                        .HasForeignKey("CreationUserId")
                        .HasConstraintName("FK_address_user");

                    b.HasOne("Inafocam.core.Modelos.Province", "Province")
                        .WithMany("Address")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_address_province");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("Address")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_address_status");

                    b.HasOne("Inafocam.core.Modelos.User", "UpgradeUser")
                        .WithMany("AddressUpgradeUser")
                        .HasForeignKey("UpgradeUserId")
                        .HasConstraintName("FK_address_user_2");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.AddressType", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("AddressType")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_address_type_status");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Agent", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.AgentType", "AgentType")
                        .WithMany("Agent")
                        .HasForeignKey("AgentTypeId")
                        .HasConstraintName("FK_agent_agent_type");

                    b.HasOne("Inafocam.core.Modelos.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("Inafocam.core.Modelos.User", "CreationUser")
                        .WithMany("AgentCreationUser")
                        .HasForeignKey("CreationUserId")
                        .HasConstraintName("FK_cordinator_user");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("Agent")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_cordinator_status");

                    b.HasOne("Inafocam.core.Modelos.User", "UpgradeUser")
                        .WithMany("AgentUpgradeUser")
                        .HasForeignKey("UpgradeUserId")
                        .HasConstraintName("FK_cordinator_user_2");

                    b.HasOne("Inafocam.core.Modelos.User", "User")
                        .WithMany("AgentUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_agent_user");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.AgentType", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("AgentType")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_agent_type_status");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.AgreementWithInstitutionsRelatedToCurricularActivities", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId1");

                    b.HasOne("Inafocam.core.Modelos.ScholarshipProgramTracing", "Tracing")
                        .WithMany()
                        .HasForeignKey("TracingScholarshipProgramTracingId");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.AgreementsInstitutionRelatedCoCurricularActivities", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId1");

                    b.HasOne("Inafocam.core.Modelos.ScholarshipProgramTracing", "Tracing")
                        .WithMany()
                        .HasForeignKey("TracingScholarshipProgramTracingId");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.City", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Country", "Country")
                        .WithMany("City")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_city_country");

                    b.HasOne("Inafocam.core.Modelos.Province", "Province")
                        .WithMany("City")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_city_province");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("City")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_city_status");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Comment", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Inafocam.core.Modelos.ScholarshipProgramTracing", "ScholarshipProgramTracing")
                        .WithMany()
                        .HasForeignKey("ScholarshipProgramTracingId");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Communication", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.User", "CreationUser")
                        .WithMany("CommunicationCreationUser")
                        .HasForeignKey("CreationUserId")
                        .HasConstraintName("FK_communication_user");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("Communication")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_communication_status");

                    b.HasOne("Inafocam.core.Modelos.User", "UpgradeUser")
                        .WithMany("CommunicationUpgradeUser")
                        .HasForeignKey("UpgradeUserId")
                        .HasConstraintName("FK_communication_user_2");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Company", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Address", "Address")
                        .WithMany("Company")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_company_address");

                    b.HasOne("Inafocam.core.Modelos.Communication", "Communication")
                        .WithMany("Company")
                        .HasForeignKey("CommunicationId")
                        .HasConstraintName("FK_company_communication");

                    b.HasOne("Inafocam.core.Modelos.CompanyType", "CompanyType")
                        .WithMany("Company")
                        .HasForeignKey("CompanyTypeId")
                        .HasConstraintName("FK_company_company_type");

                    b.HasOne("Inafocam.core.Modelos.Contact", "Contact")
                        .WithMany("Company")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_company_contact");

                    b.HasOne("Inafocam.core.Modelos.User", "CreationUser")
                        .WithMany("CompanyCreationUser")
                        .HasForeignKey("CreationUserId")
                        .HasConstraintName("FK_company_user_3");

                    b.HasOne("Inafocam.core.Modelos.User", "Manager")
                        .WithMany("CompanyManager")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("FK_company_user");

                    b.HasOne("Inafocam.core.Modelos.User", "Owner")
                        .WithMany("CompanyOwner")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK_company_user_2");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("Company")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_company_status");

                    b.HasOne("Inafocam.core.Modelos.User", "UpgradeUser")
                        .WithMany("CompanyUpgradeUser")
                        .HasForeignKey("UpgradeUserId")
                        .HasConstraintName("FK_company_user_4");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.CompanyType", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("CompanyType")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_company_type_status");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ComponentFileType", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Contact", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.ContactCommunication", "ContactCommunication")
                        .WithMany()
                        .HasForeignKey("ContactCommunicationId1");

                    b.HasOne("Inafocam.core.Modelos.ContactType", "ContactType")
                        .WithMany("Contact")
                        .HasForeignKey("ContactTypeId")
                        .HasConstraintName("FK_contact_contact_type")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Inafocam.core.Modelos.User", "CreationUser")
                        .WithMany("ContactCreationUser")
                        .HasForeignKey("CreationUserId")
                        .HasConstraintName("FK_contact_user");

                    b.HasOne("Inafocam.core.Modelos.DocumentType", "DocumentType")
                        .WithMany("Contact")
                        .HasForeignKey("DocumentTypeId")
                        .HasConstraintName("FK_contact_document_type");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("Contact")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_contact_status");

                    b.HasOne("Inafocam.core.Modelos.User", "UpgradeUser")
                        .WithMany("ContactUpgradeUser")
                        .HasForeignKey("UpgradeUserId")
                        .HasConstraintName("FK_contact_user_2");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ContactAddress", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Address", "Address")
                        .WithMany("ContactAddress")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_contact_address_address");

                    b.HasOne("Inafocam.core.Modelos.Contact", "Contact")
                        .WithOne("ContactAddres")
                        .HasForeignKey("Inafocam.core.Modelos.ContactAddress", "ContactId");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("ContactAddress")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_contact_address_status");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ContactCommunication", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Communication", "Communication")
                        .WithMany("ContactCommunication")
                        .HasForeignKey("CommunicationId")
                        .HasConstraintName("FK_contact_communication_communication");

                    b.HasOne("Inafocam.core.Modelos.Contact", "Contact")
                        .WithMany("ContactCommunicationList")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_contact_communication_contact");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("ContactCommunication")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_contact_communication_status");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ContactType", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.DocumentType", "DocumentType")
                        .WithMany("ContactType")
                        .HasForeignKey("DocumentTypeId")
                        .HasConstraintName("FK_contact_type_document_type");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("ContactType")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_contact_type_status");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Country", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("Country")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_country_status");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.DocumentType", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("DocumentType")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_document_type_status");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.EducationType", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("EducationType")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_education_type_status");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.File", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.User", "CreationUser")
                        .WithMany("FileCreationUser")
                        .HasForeignKey("CreationUserId")
                        .HasConstraintName("FK_file_user");

                    b.HasOne("Inafocam.core.Modelos.FileType", "FileType")
                        .WithMany("File")
                        .HasForeignKey("FileTypeId")
                        .HasConstraintName("FK_file_file_type");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("File")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_file_status");

                    b.HasOne("Inafocam.core.Modelos.User", "UpgradeUser")
                        .WithMany("FileUpgradeUser")
                        .HasForeignKey("UpgradeUserId")
                        .HasConstraintName("FK_file_user_2");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.FileType", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("FileType")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_file_type_status");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Menu", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Menu", "MenuParent")
                        .WithMany("InverseMenuParent")
                        .HasForeignKey("MenuParentId")
                        .HasConstraintName("FK_menu_menu");

                    b.HasOne("Inafocam.core.Modelos.MenuType", "MenuType")
                        .WithMany("Menu")
                        .HasForeignKey("MenuTypeId")
                        .HasConstraintName("FK_menu_menu_type");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("Menu")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_menu_status");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.MenuType", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("MenuType")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_menu_type_status");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Nationality", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Object", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("Object")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_object_status");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ObjectMapping", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Object", "Object")
                        .WithMany("ObjectMapping")
                        .HasForeignKey("ObjectId")
                        .HasConstraintName("FK_object_mapping_object");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("ObjectMapping")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_object_mapping_status");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Office", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Address", "Address")
                        .WithMany("Office")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_office_address");

                    b.HasOne("Inafocam.core.Modelos.Communication", "Communication")
                        .WithMany("Office")
                        .HasForeignKey("CommunicationId")
                        .HasConstraintName("FK_office_communication");

                    b.HasOne("Inafocam.core.Modelos.Company", "Company")
                        .WithMany("Office")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_office_company");

                    b.HasOne("Inafocam.core.Modelos.User", "CreationUser")
                        .WithMany("OfficeCreationUser")
                        .HasForeignKey("CreationUserId")
                        .HasConstraintName("FK_office_user_2");

                    b.HasOne("Inafocam.core.Modelos.User", "Manager")
                        .WithMany("OfficeManager")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("FK_office_user");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("Office")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_office_status");

                    b.HasOne("Inafocam.core.Modelos.User", "UpgradeUser")
                        .WithMany("OfficeUpgradeUser")
                        .HasForeignKey("UpgradeUserId")
                        .HasConstraintName("FK_office_user_3");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Province", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Country", "Country")
                        .WithMany("Province")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_province_country");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("Province")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_province_status");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Report", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Inafocam.core.Modelos.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inafocam.core.Modelos.ScholarshipProgramTracing", "ScholarshipProgramTracing")
                        .WithMany()
                        .HasForeignKey("TracingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ResultsFromThePreviousPeriod", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.ComponentFileType", "ComponentFileType")
                        .WithMany()
                        .HasForeignKey("ComponentFileTypeId");

                    b.HasOne("Inafocam.core.Modelos.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("Inafocam.core.Modelos.ScholarshipProgramTracing", "Tracing")
                        .WithMany()
                        .HasForeignKey("TracingId");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Schedule", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.User", "CreationUser")
                        .WithMany("ScheduleCreationUser")
                        .HasForeignKey("CreationUserId")
                        .HasConstraintName("FK_schedule_user");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("Schedule")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_schedule_status");

                    b.HasOne("Inafocam.core.Modelos.User", "UpdatingUser")
                        .WithMany("ScheduleUpdatingUser")
                        .HasForeignKey("UpdatingUserId")
                        .HasConstraintName("FK_schedule_user_2");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScheduleDay", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Schedule", "Schedule")
                        .WithMany("ScheduleDay")
                        .HasForeignKey("ScheduleId")
                        .HasConstraintName("FK_schedule_days_schedule");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipLevel", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("ScholarshipLevel")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_scholarship_level_status");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgram", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.ScholarshipLevel", "ScholarshipLevel")
                        .WithMany("ScholarshipProgram")
                        .HasForeignKey("ScholarshipLevelId")
                        .HasConstraintName("FK_scholarship_program_scholarship_level");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("ScholarshipProgram")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_scholarship_program_status");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramTracing", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Agent", "Coordinator")
                        .WithMany("ScholarshipProgramTracingCoordinator")
                        .HasForeignKey("CoordinatorId")
                        .HasConstraintName("FK_scholarship_program_tracking_agent");

                    b.HasOne("Inafocam.core.Modelos.User", "CreationUser")
                        .WithMany("ScholarshipProgramTracingCreationUser")
                        .HasForeignKey("CreationUserId")
                        .HasConstraintName("FK_scholarship_program_tracking_user");

                    b.HasOne("Inafocam.core.Modelos.ScholarshipProgramUniversity", "ScholarshipProgramUniversity")
                        .WithMany("ScholarshipProgramTracing")
                        .HasForeignKey("ScholarshipProgramUniversityId")
                        .HasConstraintName("FK_scholarship_program_tracking_scholarship_program_university");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("ScholarshipProgramTracing")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_scholarship_program_tracking_status");

                    b.HasOne("Inafocam.core.Modelos.Agent", "Technical")
                        .WithMany("ScholarshipProgramTracingTechnical")
                        .HasForeignKey("TechnicalId")
                        .HasConstraintName("FK_scholarship_program_tracking_agent_2");

                    b.HasOne("Inafocam.core.Modelos.University", "University")
                        .WithMany("ScholarshipProgramTracing")
                        .HasForeignKey("UniversityId")
                        .HasConstraintName("FK_scholarship_program_tracing_university");

                    b.HasOne("Inafocam.core.Modelos.User", "UpgradeUser")
                        .WithMany("ScholarshipProgramTracingUpgradeUser")
                        .HasForeignKey("UpgradeUserId")
                        .HasConstraintName("FK_scholarship_program_tracking_user_2");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramTracingAgreement", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.User", "CommentedUser")
                        .WithMany("ScholarshipProgramTracingAgreementCommentedUser")
                        .HasForeignKey("CommentedUserId")
                        .HasConstraintName("FK_scholarship_program_tracking_agreement_user_3");

                    b.HasOne("Inafocam.core.Modelos.User", "CreationUser")
                        .WithMany("ScholarshipProgramTracingAgreementCreationUser")
                        .HasForeignKey("CreationUserId")
                        .HasConstraintName("FK_scholarship_program_tracking_agreement_user");

                    b.HasOne("Inafocam.core.Modelos.ScholarshipProgramTracing", "ScholarshipProgramTracing")
                        .WithMany("ScholarshipProgramTracingAgreement")
                        .HasForeignKey("ScholarshipProgramTracingId")
                        .HasConstraintName("FK_tracking");

                    b.HasOne("Inafocam.core.Modelos.ScholarshipProgramUniversityAgreement", "ScholarshipProgramUniversityAgreement")
                        .WithMany("ScholarshipProgramTracingAgreement")
                        .HasForeignKey("ScholarshipProgramUniversityAgreementId")
                        .HasConstraintName("FK_scholarship_program_tracing_agreement");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("ScholarshipProgramTracingAgreement")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_scholarship_program_tracking_agreement_status");

                    b.HasOne("Inafocam.core.Modelos.User", "UpgradeUser")
                        .WithMany("ScholarshipProgramTracingAgreementUpgradeUser")
                        .HasForeignKey("UpgradeUserId")
                        .HasConstraintName("FK_scholarship_program_tracking_agreement_user_2");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramTracingAgreementFile", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.File", "File")
                        .WithMany("ScholarshipProgramTracingAgreementFile")
                        .HasForeignKey("FileId")
                        .HasConstraintName("FK_scholarship_program_tracking_agreement_file_file");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("ScholarshipProgramTracingAgreementFile")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_scholarship_program_tracking_agreement_file_status");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramTracingAgreementsWithPracticeCenter", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId1");

                    b.HasOne("Inafocam.core.Modelos.ScholarshipProgramTracing", "Tracing")
                        .WithMany()
                        .HasForeignKey("TracingScholarshipProgramTracingId");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramTracingCourse", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("ScholarshipProgramTracingCourse")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_scholarship_program_tracing_plan_status");

                    b.HasOne("Inafocam.core.Modelos.ScholarshipProgramTracing", "Tracing")
                        .WithMany("ScholarshipProgramTracingCourse")
                        .HasForeignKey("TracingId")
                        .HasConstraintName("FK_scholarship_program_tracing_plan_scholarship_program_tracing");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramTracingCourseFile", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.File", "File")
                        .WithMany("ScholarshipProgramTracingCourseFile")
                        .HasForeignKey("FileId")
                        .HasConstraintName("FK__tracing_plan_file");

                    b.HasOne("Inafocam.core.Modelos.ScholarshipProgramTracingCourseFileType", "FileType")
                        .WithMany("ScholarshipProgramTracingCourseFile")
                        .HasForeignKey("FileTypeId")
                        .HasConstraintName("FK_file_type");

                    b.HasOne("Inafocam.core.Modelos.ScholarshipProgramTracingCourse", "ScholarshipProgramTracingCourse")
                        .WithMany()
                        .HasForeignKey("ScholarshipProgramTracingCourseId");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("ScholarshipProgramTracingCourseFile")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_tracing_plan_status");

                    b.HasOne("Inafocam.core.Modelos.ScholarshipProgramTracing", "Tracing")
                        .WithMany("ScholarshipProgramTracingCourseFile")
                        .HasForeignKey("TracingId")
                        .HasConstraintName("FK__tracing_plan");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramTracingPractice", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("ScholarshipProgramTracingPractice")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_practice_status");

                    b.HasOne("Inafocam.core.Modelos.ScholarshipProgramTracing", "Tracing")
                        .WithMany("ScholarshipProgramTracingPractice")
                        .HasForeignKey("TracingId")
                        .HasConstraintName("FK_practice_tracing");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramTracingPracticePlanning", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.ActionType", "ActionType")
                        .WithMany()
                        .HasForeignKey("ActionTypeId");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("ScholarshipProgramTracingPracticePlanning")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_planning_status");

                    b.HasOne("Inafocam.core.Modelos.ScholarshipProgramTracing", "Tracing")
                        .WithMany("ScholarshipProgramTracingPracticePlanning")
                        .HasForeignKey("TracingId")
                        .HasConstraintName("FK_planning_tracing");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramTracingQualitySystem", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.File", "File")
                        .WithMany("ScholarshipProgramTracingQualitySystem")
                        .HasForeignKey("FileId")
                        .HasConstraintName("FK_file_quality");

                    b.HasOne("Inafocam.core.Modelos.ScholarshipProgramTracingQualitySystemFileType", "FileType")
                        .WithMany()
                        .HasForeignKey("FileTypeId");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("ScholarshipProgramTracingQualitySystem")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_status_quality");

                    b.HasOne("Inafocam.core.Modelos.ScholarshipProgramTracing", "Tracing")
                        .WithMany("ScholarshipProgramTracingQualitySystem")
                        .HasForeignKey("TracingId")
                        .HasConstraintName("FK_program_tracing");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramTracingQualitySystemFileType", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramTracingStudentPractice", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("ScholarshipProgramTracingStudentPractice")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_scholarship_program_tracing_student_practice_status");

                    b.HasOne("Inafocam.core.Modelos.StudentPracticeType", "StudentPracticeType")
                        .WithMany()
                        .HasForeignKey("StudentPracticeTypeId");

                    b.HasOne("Inafocam.core.Modelos.ScholarshipProgramTracing", "Tracing")
                        .WithMany("ScholarshipProgramTracingStudentPractice")
                        .HasForeignKey("TracingId")
                        .HasConstraintName("FK_student_practice_tracing");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramTracingStudentPracticeFile", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.HasOne("Inafocam.core.Modelos.ScholarshipProgramTracingStudentPractice", "ScholarshipProgramTracingStudentPractice")
                        .WithMany()
                        .HasForeignKey("ScholarshipProgramTracingStudentPracticeId");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramTracingStudentSupport", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("ScholarshipProgramTracingStudentSupport")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_scholarship_program_tracing_student_support_status");

                    b.HasOne("Inafocam.core.Modelos.ScholarshipProgramTracing", "Tracing")
                        .WithMany("ScholarshipProgramTracingStudentSupport")
                        .HasForeignKey("TracingId")
                        .HasConstraintName("FK_student_support_tracing")
                        .IsRequired();
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramUniversity", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Agent", "Coordinator")
                        .WithMany("ScholarshipProgramUniversityCoordinator")
                        .HasForeignKey("CoordinatorId")
                        .HasConstraintName("FK_scholarship_program_university_agent");

                    b.HasOne("Inafocam.core.Modelos.ScholarshipLevel", "ScholarshipLevel")
                        .WithMany("ScholarshipProgramUniversity")
                        .HasForeignKey("ScholarshipLevelId")
                        .HasConstraintName("FK_scholarship_program_university_scholarship_level");

                    b.HasOne("Inafocam.core.Modelos.ScholarshipProgram", "ScholarshipProgram")
                        .WithMany("ScholarshipProgramUniversity")
                        .HasForeignKey("ScholarshipProgramId")
                        .HasConstraintName("FK_scholarship_program_university_scholarship_program");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("ScholarshipProgramUniversity")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_scholarship_program_university_status");

                    b.HasOne("Inafocam.core.Modelos.Agent", "Technical")
                        .WithMany("ScholarshipProgramUniversityTechnical")
                        .HasForeignKey("TechnicalId")
                        .HasConstraintName("FK_scholarship_program_university_agent_2");

                    b.HasOne("Inafocam.core.Modelos.University", "University")
                        .WithMany("ScholarshipProgramUniversity")
                        .HasForeignKey("UniversityId")
                        .HasConstraintName("FK_scholarship_program_university_university");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramUniversityAgent", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Agent", "Agent")
                        .WithMany("ScholarshipProgramUniversityAgent")
                        .HasForeignKey("AgentId")
                        .HasConstraintName("FK_scholarship_contact");

                    b.HasOne("Inafocam.core.Modelos.ScholarshipProgramUniversity", "ScholarshipProgramUniversity")
                        .WithMany("ScholarshipProgramUniversityAgent")
                        .HasForeignKey("ScholarshipProgramUniversityId")
                        .HasConstraintName("FK_program_university");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("ScholarshipProgramUniversityAgent")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_status");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramUniversityAgreement", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.AgreementType", "AgreementType")
                        .WithMany("ScholarshipProgramUniversityAgreement")
                        .HasForeignKey("AgreementTypeId")
                        .HasConstraintName("FK_scholarship_program_university_agreement_agreement_type");

                    b.HasOne("Inafocam.core.Modelos.User", "CreationUser")
                        .WithMany("ScholarshipProgramUniversityAgreementCreationUser")
                        .HasForeignKey("CreationUserId")
                        .HasConstraintName("FK_scholarship_program_university_agreement_user");

                    b.HasOne("Inafocam.core.Modelos.ScholarshipProgramUniversity", "ScholarshipProgramUniversity")
                        .WithMany("ScholarshipProgramUniversityAgreement")
                        .HasForeignKey("ScholarshipProgramUniversityId")
                        .HasConstraintName("FK_scholarship_program_university");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("ScholarshipProgramUniversityAgreement")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_scholarship_program_university_agreement_status");

                    b.HasOne("Inafocam.core.Modelos.User", "UpgradeUser")
                        .WithMany("ScholarshipProgramUniversityAgreementUpgradeUser")
                        .HasForeignKey("UpgradeUserId")
                        .HasConstraintName("FK_scholarship_program_university_agreement_user_2");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.ScholarshipProgramUniversitySubjectMatter", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Teacher", "PredictedTeacher")
                        .WithMany("ScholarshipProgramUniversitySubjectMatterPredictedTeacher")
                        .HasForeignKey("PredictedTeacherId")
                        .HasConstraintName("FK_scholarship_program_university_subject_matter_teacher_2");

                    b.HasOne("Inafocam.core.Modelos.ScholarshipProgramUniversity", "ScholarshipProgramUniversity")
                        .WithMany("ScholarshipProgramUniversitySubjectMatter")
                        .HasForeignKey("ScholarshipProgramUniversityId")
                        .HasConstraintName("FK_spusm_scholarship_program_university")
                        .IsRequired();

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("ScholarshipProgramUniversitySubjectMatter")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_scholarship_program_university_subject_matter_status");

                    b.HasOne("Inafocam.core.Modelos.SubjectMatter", "SubjectMatter")
                        .WithMany("ScholarshipProgramUniversitySubjectMatter")
                        .HasForeignKey("SubjectMatterId")
                        .HasConstraintName("FK_scholarship_program_university_subject_matter_subject_matter");

                    b.HasOne("Inafocam.core.Modelos.Teacher", "Teacher")
                        .WithMany("ScholarshipProgramUniversitySubjectMatterTeacher")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_scholarship_program_university_subject_matter_teacher");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.StudentPracticeType", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.SubjectMatter", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Teacher", "AssignedTeacher")
                        .WithMany()
                        .HasForeignKey("AssignedTeacherId");

                    b.HasOne("Inafocam.core.Modelos.User", "CreationUser")
                        .WithMany("SubjectMatterCreationUser")
                        .HasForeignKey("CreationUserId")
                        .HasConstraintName("FK_subject_matter_user");

                    b.HasOne("Inafocam.core.Modelos.ScholarshipProgramUniversity", "ScholarshipProgramUniversity")
                        .WithMany()
                        .HasForeignKey("ScholarshipProgramUniversityId");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("SubjectMatter")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_subject_matter_status");

                    b.HasOne("Inafocam.core.Modelos.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");

                    b.HasOne("Inafocam.core.Modelos.TracingStudyPlanDevelopment", "TracingStudyPlanDevelopment")
                        .WithMany()
                        .HasForeignKey("TracingStudyPlanDevelopmentId");

                    b.HasOne("Inafocam.core.Modelos.User", "UpgradeUser")
                        .WithMany("SubjectMatterUpgradeUser")
                        .HasForeignKey("UpgradeUserId")
                        .HasConstraintName("FK_subject_matter_user_2");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Teacher", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Contact", "Contact")
                        .WithMany("Teacher")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_teacher_contact");

                    b.HasOne("Inafocam.core.Modelos.TeacherEducation", "HigherTeacherEducation")
                        .WithMany("Teacher")
                        .HasForeignKey("HigherTeacherEducationId")
                        .HasConstraintName("FK_teacher_teacher_education");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("Teacher")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_teacher_status");

                    b.HasOne("Inafocam.core.Modelos.TeacherHiringType", "TeacherHiringType")
                        .WithMany("Teacher")
                        .HasForeignKey("TeacherHiringTypeId");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.TeacherEducation", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.EducationType", "EducationType")
                        .WithMany("TeacherEducation")
                        .HasForeignKey("EducationTypeId")
                        .HasConstraintName("FK_teacher_education_education_type");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("TeacherEducation")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_teacher_education_status");

                    b.HasOne("Inafocam.core.Modelos.Teacher", "TeacherNavigation")
                        .WithMany("TeacherEducation")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_teacher_education_teacher")
                        .IsRequired();
                });

            modelBuilder.Entity("Inafocam.core.Modelos.TeacherFile", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.File", "File")
                        .WithMany("TeacherFile")
                        .HasForeignKey("FileId")
                        .HasConstraintName("FK_teacher_file_file");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("TeacherFile")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_teacher_file_status");

                    b.HasOne("Inafocam.core.Modelos.TeacherFileType", "TeacherFileType")
                        .WithMany("TeacherFile")
                        .HasForeignKey("TeacherFileTypeId")
                        .HasConstraintName("FK_teacher_file_teacher_file_type");

                    b.HasOne("Inafocam.core.Modelos.Teacher", "Teacher")
                        .WithMany("TeacherFile")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_teacher_file_teacher")
                        .IsRequired();

                    b.HasOne("Inafocam.core.Modelos.TeacherResearch", "TeacherResearch")
                        .WithMany("TeacherFile")
                        .HasForeignKey("TeacherResearchId")
                        .HasConstraintName("FK_teacher_file_teacher_research");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.TeacherFileType", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("TeacherFileType")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_teacher_file_type_status");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.TeacherHiringType", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("TeacherHiringType")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_teacher_hiring_type_status");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.TeacherResearch", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("TeacherResearch")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_teacher_research_status");

                    b.HasOne("Inafocam.core.Modelos.Teacher", "Teacher")
                        .WithMany("TeacherResearch")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_teacher_research_teacher")
                        .IsRequired();
                });

            modelBuilder.Entity("Inafocam.core.Modelos.TracingStudyPlanDevelopment", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Teacher", "AssignedTeacher")
                        .WithMany("TracingStudyPlanDevelopmentAssignedTeacher")
                        .HasForeignKey("AssignedTeacherId")
                        .HasConstraintName("FK_teacher_teacher_2");

                    b.HasOne("Inafocam.core.Modelos.TeacherEducation", "HigherTitleSupportMatter")
                        .WithMany("TracingStudyPlanDevelopment")
                        .HasForeignKey("HigherTitleSupportMatterId")
                        .HasConstraintName("FK_teacher_education");

                    b.HasOne("Inafocam.core.Modelos.ScholarshipProgramTracing", "ScholarshipProgramTracing")
                        .WithMany("TracingStudyPlanDevelopment")
                        .HasForeignKey("ScholarshipProgramTracingId")
                        .HasConstraintName("FK_tracing");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("TracingStudyPlanDevelopment")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_teacher_status_status");

                    b.HasOne("Inafocam.core.Modelos.File", "StudentReportFile")
                        .WithMany()
                        .HasForeignKey("StudentReportFileId");

                    b.HasOne("Inafocam.core.Modelos.SubjectMatter", "SubjectMatter")
                        .WithMany()
                        .HasForeignKey("SubjectMatterId");

                    b.HasOne("Inafocam.core.Modelos.File", "SubjectMatterScoreReportFile")
                        .WithMany()
                        .HasForeignKey("SubjectMatterScoreReportFileId");

                    b.HasOne("Inafocam.core.Modelos.Teacher", "Teacher")
                        .WithMany("TracingStudyPlanDevelopmentTeacher")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_teacher_teacher");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.University", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Address", "Address")
                        .WithMany("University")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_university_address");

                    b.HasOne("Inafocam.core.Modelos.Communication", "Communication")
                        .WithMany("University")
                        .HasForeignKey("CommunicationId")
                        .HasConstraintName("FK_university_communication");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("University")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_university_status");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.User", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Company", "Company")
                        .WithMany("User")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_user_company");

                    b.HasOne("Inafocam.core.Modelos.Contact", "Contact")
                        .WithMany("User")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_user_contact");

                    b.HasOne("Inafocam.core.Modelos.User", "CreationUser")
                        .WithMany("InverseCreationUser")
                        .HasForeignKey("CreationUserId")
                        .HasConstraintName("FK_user_user");

                    b.HasOne("Inafocam.core.Modelos.Office", "Office")
                        .WithMany("User")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK_user_office");

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("User")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_user_status");

                    b.HasOne("Inafocam.core.Modelos.User", "UpgradeUser")
                        .WithMany("InverseUpgradeUser")
                        .HasForeignKey("UpgradeUserId")
                        .HasConstraintName("FK_user_user_2");

                    b.HasOne("Inafocam.core.Modelos.UserRole", "UserRole")
                        .WithMany("User")
                        .HasForeignKey("UserRoleId")
                        .HasConstraintName("FK_user_user_role");

                    b.HasOne("Inafocam.core.Modelos.Schedule", "UserSchedule")
                        .WithMany("User")
                        .HasForeignKey("UserScheduleId")
                        .HasConstraintName("FK_user_schedule");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.UserMapRole", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.User", "User")
                        .WithMany("UserMapRole")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_user_roles_user");

                    b.HasOne("Inafocam.core.Modelos.UserRole", "UserRole")
                        .WithMany("UserMapRole")
                        .HasForeignKey("UserRoleId")
                        .HasConstraintName("FK_user_roles_user_role");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.UserRole", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.User", "CreationUser")
                        .WithMany("UserRoleCreationUser")
                        .HasForeignKey("CreationUserId")
                        .HasConstraintName("FK_user_role_user");

                    b.HasOne("Inafocam.core.Modelos.Office", "Office")
                        .WithMany("UserRole")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK_user_role_office")
                        .IsRequired();

                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("UserRole")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_user_role_status");

                    b.HasOne("Inafocam.core.Modelos.User", "UpgradeUser")
                        .WithMany("UserRoleUpgradeUser")
                        .HasForeignKey("UpgradeUserId")
                        .HasConstraintName("FK_user_role_user_2");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.UserRolePermission", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Object", "Object")
                        .WithMany("UserRolePermission")
                        .HasForeignKey("ObjectId")
                        .HasConstraintName("FK_user_role_permission_table");

                    b.HasOne("Inafocam.core.Modelos.UserRole", "UserRole")
                        .WithMany("UserRolePermission")
                        .HasForeignKey("UserRoleId")
                        .HasConstraintName("FK_user_role_permission_user_role");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.UserUniversity", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Status", "Status")
                        .WithMany("UserUniversity")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK__status");

                    b.HasOne("Inafocam.core.Modelos.University", "University")
                        .WithMany("UserUniversity")
                        .HasForeignKey("UniversityId")
                        .HasConstraintName("FK__university");
                });

            modelBuilder.Entity("Inafocam.core.Modelos.Usuario", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inafocam.core.Modelos.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Inafocam.core.Modelos.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
